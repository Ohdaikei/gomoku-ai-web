{"ast":null,"code":"var _jsxFileName = \"/Users/keisukehirano/Documents/\\u8D77\\u696D/gomoku-ai-web/client/src/components/Board.jsx\",\n  _s = $RefreshSig$();\n// import { useState } from \"react\";\n\n// const BOARD_SIZE = 9;\n\n// export default function Board() {\n//     const [board, setBoard] = useState(\n//         Array(BOARD_SIZE).fill(null).map(() => Array(BOARD_SIZE).fill(null))\n//     );\n\n//     const [isBlackTurn, setIsBlackTurn] = useState(true); //true:黒 false:白\n\n//     const handleClick = (x, y) => {\n//         if (board[y][x] !== null) return; //石がない時\n\n//         const newBoard = board.map((row) => row.slice());\n\n//         newBoard[y][x] = isBlackTurn ? \"●\" : \"○\";\n\n//         setBoard(newBoard);\n//         setIsBlackTurn(!isBlackTurn);\n\n//         console.log(`(${x}, ${y}) に ${isBlackTurn ? \"●\" : \"○\"} を置きました`);\n//     };\n\n//     return (\n//         <div style={{ display: \"inline-block\", border: \"2px solid black\" }}>\n//             {board.map((row, y) => (\n//                 <div key={y} style={{ display: \"flex\"}}>\n//                     {row.map((cell, x) => (\n//                         <div\n//                             key={x}\n//                             onClick={() => handleClick(x, y)}\n//                             style={{\n//                                 width: \"40px\",\n//                                 height: \"40px\",\n//                                 border: \"1px solid #555\",\n//                                 display: \"flex\",\n//                                 alignItems: \"center\",\n//                                 justifyContent: \"center\",\n//                                 cursor: \"pointer\",\n//                                 backgroundColor: cell === \"●\" ? \"black\" : cell === \"○\" ? \"white\" : \"transparent\",\n//                             }}\n//                         >\n//                             {cell}\n//                         </div>\n//                     ))}\n//                 </div>\n//             ))}\n//         </div>\n//     );\n// }\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BOARD_SIZE = 15; // 15x15の五目並べ盤\n\nexport default function Board() {\n  _s();\n  const [board, setBoard] = useState(Array(BOARD_SIZE).fill(null).map(() => Array(BOARD_SIZE).fill(null)));\n  const [isBlackTurn, setIsBlackTurn] = useState(true);\n  const [winner, setWinner] = useState(null);\n  const checkWin = (board, x, y, color) => {\n    const directions = [[1, 0], [0, 1], [1, 1], [1, -1]];\n    for (const [dx, dy] of directions) {\n      let count = 1;\n      let nx = x + dx;\n      let ny = y + dy;\n      while (nx >= 0 && nx < BOARD_SIZE && ny >= 0 && ny < BOARD_SIZE && board[ny][nx] === color) {\n        count++;\n        nx += dx;\n        ny += dy;\n      }\n      nx = x - dx;\n      ny = y - dy;\n      while (nx >= 0 && nx < BOARD_SIZE && ny >= 0 && ny < BOARD_SIZE && board[ny][nx] === color) {\n        count++;\n        nx -= dx;\n        ny -= dy;\n      }\n      if (count >= 5) return true;\n    }\n    return false;\n  };\n  const resetGame = () => {\n    setBoard(Array(BOARD_SIZE).fill(null).map(() => Array(BOARD_SIZE).fill(null)));\n    setIsBlackTurn(true);\n    setWinner(null);\n  };\n  const getAIMove = async currentBoard => {\n    console.log(\"getAI呼ばれたよ\");\n    try {\n      const response = await fetch(\"http://localhost:5000/ai-move\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          board: currentBoard\n        })\n      });\n      if (!response.ok) {\n        throw new Error(\"AIリクエスト失敗\");\n      }\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error(\"AIとの通信に失敗しました:\", error);\n      return null;\n    }\n  };\n  const handleClick = async (x, y) => {\n    if (board[y][x] !== null || winner !== null) return;\n    const newBoard = board.map(row => row.slice());\n    const playerColor = isBlackTurn ? \"black\" : \"white\";\n    const aiColor = isBlackTurn ? \"white\" : \"black;\";\n    newBoard[y][x] = playerColor;\n    setBoard(newBoard);\n    if (checkWin(newBoard, x, y, playerColor)) {\n      setWinner(playerColor);\n      return;\n    }\n    const aiMove = await getAIMove(newBoard);\n    if (!aiMove) return;\n    const {\n      x: aiX,\n      y: aiY\n    } = aiMove;\n    if (newBoard[aiX][aiY] !== null) return;\n    const nextBoard = newBoard.map(row => row.slice());\n    nextBoard[aiY][aiX] = aiColor;\n    setBoard(nextBoard);\n    if (checkWin(nextBoard, aiX, aiY, isBlackTurn ? \"white\" : \"black\")) {\n      setWinner(aiColor);\n    } else {\n      setIsBlackTurn(isBlackTurn);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        justifyContent: \"center\",\n        marginTop: \"2rem\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"relative\",\n          width: `${(BOARD_SIZE - 1) * 40}px`,\n          height: `${(BOARD_SIZE - 1) * 40}px`,\n          backgroundColor: \"#dca\",\n          border: \"2px solid #333\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n          width: (BOARD_SIZE - 1) * 40,\n          height: (BOARD_SIZE - 1) * 40,\n          style: {\n            position: \"absolute\",\n            top: 0,\n            left: 0\n          },\n          children: [Array(BOARD_SIZE).fill(0).map((_, i) => /*#__PURE__*/_jsxDEV(\"line\", {\n            x1: i * 40,\n            y1: 0,\n            x2: i * 40,\n            y2: (BOARD_SIZE - 1) * 40,\n            stroke: \"#555\",\n            strokeWidth: \"2\"\n          }, `v-${i}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 17\n          }, this)), Array(BOARD_SIZE).fill(0).map((_, i) => /*#__PURE__*/_jsxDEV(\"line\", {\n            x1: 0,\n            y1: i * 40,\n            x2: (BOARD_SIZE - 1) * 40,\n            y2: i * 40,\n            stroke: \"#555\",\n            strokeWidth: \"2\"\n          }, `h-${i}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 11\n        }, this), board.map((row, y) => row.map((cell, x) => /*#__PURE__*/_jsxDEV(\"div\", {\n          onClick: () => handleClick(x, y),\n          style: {\n            position: \"absolute\",\n            top: `${y * 40}px`,\n            left: `${x * 40}px`,\n            width: \"20px\",\n            height: \"20px\",\n            transform: \"translate(-50%, -50%)\",\n            cursor: winner ? \"default\" : \"pointer\"\n          },\n          children: cell && /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              width: \"20px\",\n              height: \"20px\",\n              borderRadius: \"50%\",\n              backgroundColor: cell\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 19\n          }, this)\n        }, `${x}-${y}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 15\n        }, this)))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this), winner && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: \"center\",\n        marginTop: \"1.5rem\",\n        fontSize: \"1.5rem\",\n        fontWeight: \"bold\"\n      },\n      children: winner === \"black\" ? \"● 黒の勝ち！\" : \"○ 白の勝ち！\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: \"center\",\n        marginTop: \"1rem\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: resetGame,\n        style: {\n          padding: \"0.5rem 1rem\",\n          fontSize: \"1rem\",\n          cursor: \"pointer\"\n        },\n        children: \"\\u30EA\\u30BB\\u30C3\\u30C8\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 174,\n    columnNumber: 5\n  }, this);\n}\n_s(Board, \"x9sYnJCIPhA3v1qFpSXIpQ4SmKI=\");\n_c = Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","BOARD_SIZE","Board","_s","board","setBoard","Array","fill","map","isBlackTurn","setIsBlackTurn","winner","setWinner","checkWin","x","y","color","directions","dx","dy","count","nx","ny","resetGame","getAIMove","currentBoard","console","log","response","fetch","method","headers","body","JSON","stringify","ok","Error","data","json","error","handleClick","newBoard","row","slice","playerColor","aiColor","aiMove","aiX","aiY","nextBoard","children","style","display","justifyContent","marginTop","position","width","height","backgroundColor","border","top","left","_","i","x1","y1","x2","y2","stroke","strokeWidth","fileName","_jsxFileName","lineNumber","columnNumber","cell","onClick","transform","cursor","borderRadius","textAlign","fontSize","fontWeight","padding","_c","$RefreshReg$"],"sources":["/Users/keisukehirano/Documents/起業/gomoku-ai-web/client/src/components/Board.jsx"],"sourcesContent":["// import { useState } from \"react\";\n\n// const BOARD_SIZE = 9;\n\n// export default function Board() {\n//     const [board, setBoard] = useState(\n//         Array(BOARD_SIZE).fill(null).map(() => Array(BOARD_SIZE).fill(null))\n//     );\n\n//     const [isBlackTurn, setIsBlackTurn] = useState(true); //true:黒 false:白\n\n//     const handleClick = (x, y) => {\n//         if (board[y][x] !== null) return; //石がない時\n\n//         const newBoard = board.map((row) => row.slice());\n\n//         newBoard[y][x] = isBlackTurn ? \"●\" : \"○\";\n\n//         setBoard(newBoard);\n//         setIsBlackTurn(!isBlackTurn);\n\n//         console.log(`(${x}, ${y}) に ${isBlackTurn ? \"●\" : \"○\"} を置きました`);\n//     };\n\n//     return (\n//         <div style={{ display: \"inline-block\", border: \"2px solid black\" }}>\n//             {board.map((row, y) => (\n//                 <div key={y} style={{ display: \"flex\"}}>\n//                     {row.map((cell, x) => (\n//                         <div\n//                             key={x}\n//                             onClick={() => handleClick(x, y)}\n//                             style={{\n//                                 width: \"40px\",\n//                                 height: \"40px\",\n//                                 border: \"1px solid #555\",\n//                                 display: \"flex\",\n//                                 alignItems: \"center\",\n//                                 justifyContent: \"center\",\n//                                 cursor: \"pointer\",\n//                                 backgroundColor: cell === \"●\" ? \"black\" : cell === \"○\" ? \"white\" : \"transparent\",\n//                             }}\n//                         >\n//                             {cell}\n//                         </div>\n//                     ))}\n//                 </div>\n//             ))}\n//         </div>\n//     );\n// }\nimport { useState } from \"react\";\n\nconst BOARD_SIZE = 15; // 15x15の五目並べ盤\n\nexport default function Board() {\n  const [board, setBoard] = useState(\n    Array(BOARD_SIZE)\n      .fill(null)\n      .map(() => Array(BOARD_SIZE).fill(null))\n  );\n  const [isBlackTurn, setIsBlackTurn] = useState(true);\n\n  const [winner, setWinner] = useState(null);\n\n  const checkWin = (board, x, y, color) => {\n    const directions = [\n        [1, 0],\n        [0, 1],\n        [1, 1],\n        [1, -1],\n    ];\n\n    for (const [dx, dy] of directions) {\n        let count = 1;\n\n        let nx = x + dx;\n        let ny = y + dy;\n        while (\n            nx >= 0 && nx < BOARD_SIZE &&\n            ny >= 0 && ny < BOARD_SIZE &&\n            board[ny][nx] === color\n        ) {\n            count++;\n            nx += dx;\n            ny += dy;\n        }\n\n        nx = x - dx;\n        ny = y - dy;\n        while (\n            nx >= 0 && nx < BOARD_SIZE &&\n            ny >= 0 && ny < BOARD_SIZE &&\n            board[ny][nx] === color\n        ) {\n            count++;\n            nx -= dx;\n            ny -= dy;\n        }\n\n        if (count >= 5) return true;\n    }\n\n    return false;\n  };\n\n  const resetGame = () => {\n    setBoard(\n        Array(BOARD_SIZE).fill(null).map(() => Array(BOARD_SIZE).fill(null))\n    );\n    setIsBlackTurn(true);\n    setWinner(null);\n  }\n\n  const getAIMove = async (currentBoard) => {\n    console.log(\"getAI呼ばれたよ\");\n    try {\n        const response = await fetch(\"http://localhost:5000/ai-move\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({ board: currentBoard}),\n        });\n\n        if (!response.ok) {\n            throw new Error(\"AIリクエスト失敗\");\n        }\n\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error(\"AIとの通信に失敗しました:\", error);\n        return null;\n    }\n  };\n\n  const handleClick = async (x, y) => {\n    if (board[y][x] !== null || winner !== null) return;\n\n    const newBoard = board.map((row) => row.slice());\n    const playerColor = isBlackTurn ? \"black\" : \"white\";\n    const aiColor = isBlackTurn ? \"white\" : \"black;\"\n    \n    newBoard[y][x] = playerColor;\n    setBoard(newBoard);\n\n    if (checkWin(newBoard, x, y, playerColor)) {\n        setWinner(playerColor);\n        return;\n    }\n\n    const aiMove = await getAIMove(newBoard);\n\n    if (!aiMove) return;\n\n    const { x: aiX, y: aiY } = aiMove;\n    if (newBoard[aiX][aiY] !== null) return;\n\n    const nextBoard = newBoard.map((row) => row.slice());\n    nextBoard[aiY][aiX] = aiColor;\n    setBoard(nextBoard);\n\n    if (checkWin(nextBoard, aiX, aiY, isBlackTurn ? \"white\" : \"black\")) {\n        setWinner(aiColor);\n    } else {\n        setIsBlackTurn(isBlackTurn);\n    }\n  };\n\n  \n\n  return (\n    <div>\n      <div style={{ display: \"flex\", justifyContent: \"center\", marginTop: \"2rem\" }}>\n        <div\n          style={{\n            position: \"relative\",\n            width: `${(BOARD_SIZE - 1) * 40}px`,\n            height: `${(BOARD_SIZE - 1) * 40}px`,\n            backgroundColor: \"#dca\",\n            border: \"2px solid #333\",\n          }}\n        >\n          {/* グリッド線（SVG） */}\n          <svg\n            width={(BOARD_SIZE - 1) * 40}\n            height={(BOARD_SIZE - 1) * 40}\n            style={{ position: \"absolute\", top: 0, left: 0 }}\n          >\n            {/* 縦線 */}\n            {Array(BOARD_SIZE)\n              .fill(0)\n              .map((_, i) => (\n                <line\n                  key={`v-${i}`}\n                  x1={i * 40}\n                  y1={0}\n                  x2={i * 40}\n                  y2={(BOARD_SIZE - 1) * 40}\n                  stroke=\"#555\"\n                  strokeWidth=\"2\"\n                />\n              ))}\n            {/* 横線 */}\n            {Array(BOARD_SIZE)\n              .fill(0)\n              .map((_, i) => (\n                <line\n                  key={`h-${i}`}\n                  x1={0}\n                  y1={i * 40}\n                  x2={(BOARD_SIZE - 1) * 40}\n                  y2={i * 40}\n                  stroke=\"#555\"\n                  strokeWidth=\"2\"\n                />\n              ))}\n          </svg>\n\n          {/* 交点クリックと石表示 */}\n          {board.map((row, y) =>\n            row.map((cell, x) => (\n              <div\n                key={`${x}-${y}`}\n                onClick={() => handleClick(x, y)}\n                style={{\n                  position: \"absolute\",\n                  top: `${y * 40}px`,\n                  left: `${x * 40}px`,\n                  width: \"20px\",\n                  height: \"20px\",\n                  transform: \"translate(-50%, -50%)\",\n                  cursor: winner ? \"default\" : \"pointer\",\n                }}\n              >\n                {cell && (\n                  <div\n                    style={{\n                      width: \"20px\",\n                      height: \"20px\",\n                      borderRadius: \"50%\",\n                      backgroundColor: cell,\n                    }}\n                  />\n                )}\n              </div>\n            ))\n          )}\n        </div>\n      </div>\n\n      {/* 勝者表示 */}\n      {winner && (\n        <div\n          style={{\n            textAlign: \"center\",\n            marginTop: \"1.5rem\",\n            fontSize: \"1.5rem\",\n            fontWeight: \"bold\",\n          }}\n        >\n          {winner === \"black\" ? \"● 黒の勝ち！\" : \"○ 白の勝ち！\"}\n        </div>\n      )}\n      <div style={{ textAlign: \"center\", marginTop: \"1rem\"}}>\n        <button\n         onClick={resetGame}\n         style={{\n            padding: \"0.5rem 1rem\",\n            fontSize: \"1rem\",\n            cursor: \"pointer\",\n         }}\n        >\n            リセット\n        </button>\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}